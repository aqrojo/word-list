---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import type { CollectionEntry } from "astro:content";

// Obtener todos los datos de la colección de unidades
const unitsEntries = await getCollection("units");

// Definir tipos para la nueva estructura jerárquica
interface ExerciseFile {
  id: string;
  fullPath: string;
  name: string;
  wordCount: number;
}

interface Lesson {
  name: string;
  exercises: ExerciseFile[];
  isExpanded?: boolean;
}

interface Unit {
  name: string;
  lessons: Lesson[];
  totalExercises: number;
  totalWords: number;
}

interface UnitsStructure {
  [key: string]: Unit;
}

// Procesar las entradas para crear la estructura jerárquica
const unitsStructure: UnitsStructure = {};

unitsEntries.forEach((entry: CollectionEntry<"units">) => {
  const pathParts = entry.id.split("/");

  if (pathParts.length >= 3) {
    // Estructura: categoria/leccion/archivo.json
    const [category, lessonFolder, fileName] = pathParts;
    const fileNameWithoutExt = fileName.replace(".json", "");

    // Inicializar la unidad si no existe
    if (!unitsStructure[category]) {
      unitsStructure[category] = {
        name: category,
        lessons: [],
        totalExercises: 0,
        totalWords: 0,
      };
    }

    // Buscar o crear la lección
    let lesson = unitsStructure[category].lessons.find(
      (l) => l.name === lessonFolder
    );
    if (!lesson) {
      lesson = {
        name: lessonFolder,
        exercises: [],
        isExpanded: false,
      };
      unitsStructure[category].lessons.push(lesson);
    }

    // Agregar el ejercicio
    const exercise: ExerciseFile = {
      id: entry.id,
      fullPath: entry.id.replace(".json", ""),
      name: fileNameWithoutExt,
      wordCount: entry.data.nodes.length,
    };

    lesson.exercises.push(exercise);
    unitsStructure[category].totalExercises++;
    unitsStructure[category].totalWords += exercise.wordCount;
  }
});

// Ordenar las lecciones dentro de cada unidad
Object.values(unitsStructure).forEach((unit) => {
  unit.lessons.sort((a, b) => {
    // Extraer números de los nombres de lección para ordenar correctamente
    const aNum = parseInt(a.name.match(/\d+/)?.[0] || "0");
    const bNum = parseInt(b.name.match(/\d+/)?.[0] || "0");
    return aNum - bNum;
  });

  // Ordenar ejercicios dentro de cada lección
  unit.lessons.forEach((lesson) => {
    lesson.exercises.sort((a, b) => {
      const aNum = parseInt(a.name.match(/\d+/)?.[0] || "0");
      const bNum = parseInt(b.name.match(/\d+/)?.[0] || "0");
      return aNum - bNum;
    });
  });
});

// Convertir a array y ordenar
const sortedUnits = Object.values(unitsStructure).sort((a, b) =>
  a.name.localeCompare(b.name)
);
---

<Layout title="Colección de Vocabulario">
  <div class="flex flex-col min-h-screen dark:bg-gray-900">
    <Header showBackButton={false} />

    <div class="max-w-6xl mx-auto px-4 py-12 w-full flex-grow">
      <header class="mb-12 text-center">
        <div
          class="inline-block px-3 py-1 bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200 rounded-full text-sm font-medium mb-4 transition-colors"
        >
          Aprende Vocabulario
        </div>
        <h1
          class="text-4xl font-bold text-gray-900 dark:text-white mb-2 transition-colors"
        >
          Colección de Unidades de Vocabulario
        </h1>
        <p
          class="text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto transition-colors"
        >
          Explora las unidades de vocabulario organizadas por categorías y
          lecciones.
        </p>
      </header>

      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {
          sortedUnits.map((unit) => (
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-md transition-shadow transition-colors">
              <div class="p-6">
                <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-2 transition-colors capitalize">
                  {unit.name.replace(/[-_]/g, " ")}
                </h2>
                <p class="text-gray-600 dark:text-gray-300 mb-4 transition-colors">
                  {unit.lessons.length}{" "}
                  {unit.lessons.length === 1 ? "lección" : "lecciones"} &bull;{" "}
                  {unit.totalExercises}{" "}
                  {unit.totalExercises === 1 ? "ejercicio" : "ejercicios"}{" "}
                  &bull; {unit.totalWords} palabras
                </p>

                <div class="space-y-3">
                  {unit.lessons.map((lesson) => (
                    <div class="border border-gray-200 dark:border-gray-600 rounded-lg overflow-hidden">
                      <button
                        class="w-full p-3 bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors text-left flex items-center justify-between"
                        onclick={`toggleLesson('${unit.name}-${lesson.name}')`}
                      >
                        <div class="flex items-center">
                          <div class="w-8 h-8 bg-primary-100 dark:bg-primary-900 rounded-full flex items-center justify-center text-primary-800 dark:text-primary-200 font-medium mr-3 transition-colors">
                            {lesson.name.match(/\d+/)?.[0] || "?"}
                          </div>
                          <span class="dark:text-gray-100 transition-colors capitalize">
                            {lesson.name.replace(/[-_]/g, " ")}
                          </span>
                        </div>
                        <div class="flex items-center">
                          <span class="text-sm text-gray-500 dark:text-gray-400 mr-2">
                            {lesson.exercises.length}{" "}
                            {lesson.exercises.length === 1
                              ? "ejercicio"
                              : "ejercicios"}
                          </span>
                          <svg
                            class="w-4 h-4 text-gray-500 transform transition-transform"
                            id={`arrow-${unit.name}-${lesson.name}`}
                          >
                            <path
                              stroke="currentColor"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M9 5l7 7-7 7"
                            />
                          </svg>
                        </div>
                      </button>

                      <div
                        class="hidden"
                        id={`content-${unit.name}-${lesson.name}`}
                      >
                        <div class="p-2 bg-gray-25 dark:bg-gray-750 space-y-1">
                          {lesson.exercises.map((exercise) => (
                            <a
                              href={`/units/${exercise.fullPath}`}
                              class="flex items-center justify-between p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                            >
                              <span class="text-sm dark:text-gray-200 capitalize">
                                {exercise.name.replace(/[-_]/g, " ")}
                              </span>
                              <span class="text-xs text-gray-500 dark:text-gray-400">
                                {exercise.wordCount} palabras
                              </span>
                            </a>
                          ))}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>

  <script>
    function toggleLesson(lessonId) {
      const content = document.getElementById(`content-${lessonId}`);
      const arrow = document.getElementById(`arrow-${lessonId}`);

      if (content && arrow) {
        const isHidden = content.classList.contains("hidden");

        if (isHidden) {
          content.classList.remove("hidden");
          arrow.style.transform = "rotate(90deg)";
        } else {
          content.classList.add("hidden");
          arrow.style.transform = "rotate(0deg)";
        }
      }
    }

    // Hacer la función disponible globalmente
    window.toggleLesson = toggleLesson;
  </script>
</Layout>
