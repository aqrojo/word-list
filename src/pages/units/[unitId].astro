---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import ContentDisplay from "../../components/ContentDisplay.astro";
import type { CollectionEntry } from "astro:content";

// Definir tipos para mayor claridad
type UnitCollection = CollectionEntry<"units">;

interface LessonInfo {
  id: string;
  lessonNum: number;
}

interface NodeItem {
  value: string;
  audio?: boolean;
}

interface Props {
  entry: CollectionEntry<"units">;
}

interface Params {
  unitId: string;
}

// Generar todas las rutas posibles
export async function getStaticPaths() {
  const unitsEntries = await getCollection("units");

  return unitsEntries.map((entry: CollectionEntry<"units">) => {
    // Obtener el nombre del archivo sin la extensión .json
    const unitId = entry.id.split(".")[0];

    return {
      params: { unitId },
      props: { entry },
    };
  });
}

// Obtener los datos de la unidad específica
const { entry } = Astro.props as Props;
const unitId = (Astro.params as Params).unitId;

// Extraer información para la navegación
const parts = unitId.split("-");
const mainUnit = parts.length >= 2 ? `${parts[0]}-${parts[1]}` : "";
const lessonNumber = parts.length >= 3 ? parseInt(parts[2]) : 0;

// Obtener todas las unidades para la navegación
const allUnits = await getCollection("units");
const relatedLessons: LessonInfo[] = allUnits
  .filter((unit: CollectionEntry<"units">) => {
    const id = unit.id.split(".")[0];
    return id.startsWith(mainUnit) && id !== unitId;
  })
  .map((unit: CollectionEntry<"units">) => {
    const id = unit.id.split(".")[0];
    const lessonNum = parseInt(id.split("-")[2] || "0");
    return { id, lessonNum };
  })
  .sort((a: LessonInfo, b: LessonInfo) => a.lessonNum - b.lessonNum);

// Encontrar lección anterior y siguiente
const previousLesson = relatedLessons.find(
  (lesson) => lesson.lessonNum < lessonNumber
);
const nextLesson = relatedLessons.find(
  (lesson) => lesson.lessonNum > lessonNumber
);

const pageTitle = `Unidad ${mainUnit.split("-")[1]} - Lección ${lessonNumber}`;
const headerTitle = `Unidad ${
  mainUnit.split("-")[1]
} • Lección ${lessonNumber}`;
---

<Layout title={pageTitle}>
  <div
    class="flex flex-col min-h-screen dark:bg-gray-900 transition-colors duration-200"
  >
    <Header title={headerTitle} showBackButton={true} />
    <ContentDisplay nodes={entry.data.nodes} />
    <Footer
      currentIndex={1}
      totalTerms={entry.data.nodes.length}
      showNavigation={true}
    />
  </div>
</Layout>
