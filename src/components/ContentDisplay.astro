---
interface NodeItem {
  value: string;
  audio?: boolean;
}

interface Props {
  nodes: NodeItem[][];
}

const { nodes } = Astro.props;
---

<main
  class="flex-grow flex items-center justify-center dark:text-white transition-colors duration-200"
>
  <div id="content-display" class="max-w-2xl w-full px-6 py-10">
    <!-- El contenido se mostrará mediante JavaScript -->
  </div>
</main>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(5px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  :global(.animate-fade-in) {
    animation: fadeIn 0.2s ease-out forwards;
  }

  /* Transición para el icono de audio */
  :global(.transition-opacity) {
    transition: opacity 0.2s ease;
  }

  /* Estilo para el icono de audio cuando se está reproduciendo */
  :global(.audio-icon.audio-playing) {
    transform: scale(1.2);
    transition: transform 0.2s ease;
    opacity: 1 !important;
  }

  /* Hacer que todo el contenido sea clicable */
  :global([data-audio="true"]) {
    cursor: pointer;
  }

  :global([data-audio="true"]:hover) {
    opacity: 0.9;
  }
</style>

<script define:vars={{ nodes }}>
  // Estado de la aplicación
  let currentWordIndex = 0;
  let currentPartIndex = 0;
  const totalWords = nodes?.length || 0;

  // Elementos del DOM
  const contentDisplay = document.getElementById("content-display");
  const progressIndicator = document.getElementById("progress-indicator");

  // Para la síntesis de voz
  let currentUtterance = null;
  let voicesLoaded = false;
  let americanEnglishVoice = null;

  // Verificar si SpeechSynthesis está disponible
  const isSpeechAvailable = "speechSynthesis" in window;

  // Cargar voces disponibles
  function loadVoices() {
    if (!isSpeechAvailable) return;

    const voices = window.speechSynthesis.getVoices();

    // Buscar voz en inglés americano (en-US)
    americanEnglishVoice =
      voices.find(
        (voice) => voice.lang === "en-US" && voice.name.includes("Female")
      ) ||
      voices.find((voice) => voice.lang === "en-US") ||
      voices.find((voice) => voice.lang.startsWith("en-"));

    voicesLoaded = true;
  }

  // Función para detener cualquier audio en reproducción
  function stopSpeech() {
    if (isSpeechAvailable && currentUtterance) {
      window.speechSynthesis.cancel();
      currentUtterance = null;
    }
  }

  // Función para reproducir texto con SpeechSynthesis usando voz en inglés americano
  function speakText(text, isSpanish = false) {
    if (!isSpeechAvailable || !voicesLoaded) return false;

    // Primero detener cualquier audio en reproducción
    stopSpeech();

    // Crear una nueva utterance
    const utterance = new SpeechSynthesisUtterance(text);

    // Usar voz en inglés americano para todo
    if (americanEnglishVoice) {
      utterance.voice = americanEnglishVoice;
    }

    // Ajustar el idioma según el contenido, pero manteniendo la voz en inglés
    // utterance.lang = isSpanish ? "es-ES" : "en-US";
    utterance.lang = "en-US";

    // Guardar referencia a la utterance actual
    currentUtterance = utterance;

    // Reproducir
    window.speechSynthesis.speak(utterance);

    return true;
  }

  // Actualizar el indicador de progreso
  function updateProgressIndicator() {
    if (progressIndicator) {
      progressIndicator.textContent = `${currentWordIndex + 1}/${totalWords}`;
    }

    // Actualizar también la barra de progreso si está disponible
    if (typeof window["updateProgressBar"] === "function") {
      window["updateProgressBar"](currentWordIndex + 1, totalWords);
    }

    // Actualizar el texto de progreso en el Footer si está disponible
    if (typeof window["updateProgressText"] === "function") {
      window["updateProgressText"](currentWordIndex + 1, totalWords);
    }
  }

  // Mostrar una parte del contenido actual
  function showCurrentContent() {
    if (!contentDisplay || totalWords === 0) return; // Protección contra arrays vacíos

    // Detener cualquier audio en reproducción al cambiar de contenido
    stopSpeech();

    // Manejar comportamiento cíclico al final de la lección
    if (currentWordIndex >= totalWords) {
      currentWordIndex = 0;
    }

    const node = nodes[currentWordIndex];

    // Si estamos en la primera parte, limpiar la pantalla
    if (currentPartIndex === 0) {
      contentDisplay.innerHTML = "";
    }

    // Crear el elemento para mostrar esta parte del contenido
    if (currentPartIndex < node.length) {
      const item = node[currentPartIndex];
      const contentEl = document.createElement("div");
      contentEl.className = "py-2 text-center animate-fade-in relative group"; // Añadido 'relative' y 'group'
      contentEl.dataset.partIndex = currentPartIndex.toString();

      // Añadir atributos de audio si está disponible
      if (item.audio) {
        contentEl.dataset.audio = "true";
        contentEl.dataset.text = item.value;
        contentEl.dataset.lang = currentPartIndex === 0 ? "es-ES" : "en-US";
      }

      // Crear el contenido HTML según la parte
      let contentHtml = "";

      if (currentPartIndex === 0) {
        // Término en español
        contentHtml = `
          <div class="flex items-center justify-center">
            <h2 class="text-4xl font-bold text-gray-900 pe-8 dark:text-gray-100 transition-colors">${
              item.value
            }</h2>
            ${
              item.audio
                ? `
              <span class="inline-flex audio-icon ml-3 text-primary-500 dark:text-primary-400 opacity-0 group-hover:opacity-100 transition-opacity">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM14.657 2.929a1 1 0 011.414 0A9.972 9.972 0 0119 10a9.972 9.972 0 01-2.929 7.071a1 1 0 01-1.414-1.414A7.971 7.971 0 0017 10c0-2.21-.894-4.208-2.343-5.657a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </span>
            `
                : ""
            }
          </div>
        `;
      } else if (currentPartIndex === 1) {
        // Traducción
        contentHtml = `
          <div class="flex items-center justify-center">
            <h3 class="text-3xl text-primary-600 dark:text-primary-400 font-medium transition-colors">${
              item.value
            }</h3>
            ${
              item.audio
                ? `
              <span class="inline-flex audio-icon ml-3 text-primary-500 dark:text-primary-400 opacity-0 group-hover:opacity-100 transition-opacity">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM14.657 2.929a1 1 0 011.414 0A9.972 9.972 0 0119 10a9.972 9.972 0 01-2.929 7.071a1 1 0 01-1.414-1.414A7.971 7.971 0 0017 10c0-2.21-.894-4.208-2.343-5.657a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </span>
            `
                : ""
            }
          </div>
        `;
      } else {
        // Ejemplo
        contentHtml = `
          <div class="flex items-center justify-center">
            <p class="text-xl text-gray-700 dark:text-gray-300 italic transition-colors">${
              item.value
            }</p>
            ${
              item.audio
                ? `
              <span class="inline-flex audio-icon ml-2 text-primary-500 dark:text-primary-400 opacity-0 group-hover:opacity-100 transition-opacity">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM14.657 2.929a1 1 0 011.414 0A9.972 9.972 0 0119 10a9.972 9.972 0 01-2.929 7.071a1 1 0 01-1.414-1.414A7.971 7.971 0 0017 10c0-2.21-.894-4.208-2.343-5.657a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </span>
            `
                : ""
            }
          </div>
        `;
      }

      contentEl.innerHTML = contentHtml;

      // Añadir eventos para reproducir audio
      if (item.audio) {
        // Reproducir automáticamente cuando aparece
        setTimeout(() => {
          // Forzar el uso de la voz en inglés americano para todo
          speakText(item.value, currentPartIndex === 0);

          // Mostrar brevemente el icono de audio
          const audioIcon = contentEl.querySelector(".audio-icon");
          if (audioIcon) {
            audioIcon.classList.add("opacity-100", "audio-playing");
            setTimeout(() => {
              audioIcon.classList.remove("opacity-100", "audio-playing");
            }, 2000);
          }
        }, 300); // Pequeño retraso para que la animación termine

        // Reproducir al hacer clic en cualquier parte del contenido
        contentEl.addEventListener("click", () => {
          // Forzar el uso de la voz en inglés americano para todo
          speakText(item.value, currentPartIndex === 0);

          // Mostrar brevemente el icono de audio
          const audioIcon = contentEl.querySelector(".audio-icon");
          if (audioIcon) {
            audioIcon.classList.add("opacity-100", "audio-playing");
            setTimeout(() => {
              audioIcon.classList.remove("opacity-100", "audio-playing");
            }, 2000);
          }
        });
      }

      contentDisplay.appendChild(contentEl);
      currentPartIndex++;

      // Si acabamos de mostrar la última parte, preparar para el siguiente contenido automáticamente
      if (currentPartIndex >= node.length) {
        // Establecer temporizador para avanzar al siguiente contenido
        // en el próximo ciclo del event loop
        setTimeout(() => {
          currentPartIndex = 0;
          currentWordIndex++;
          updateProgressIndicator(); // Actualizar el indicador al avanzar automáticamente
          // No hay mensaje final, el comportamiento es cíclico
        }, 0);
      }
    }

    updateProgressIndicator();
  }

  // Manejar la navegación con las teclas de flecha
  document.addEventListener("keydown", (event) => {
    switch (event.key) {
      case "ArrowDown":
        // Flecha abajo: mostrar siguiente parte o siguiente palabra
        event.preventDefault();
        showCurrentContent();
        break;

      case "ArrowRight":
        // Flecha derecha: siguiente palabra
        event.preventDefault();
        currentPartIndex = 0;
        currentWordIndex++;

        // Comportamiento cíclico
        if (currentWordIndex >= totalWords) {
          currentWordIndex = 0;
        }

        showCurrentContent();
        break;

      case "ArrowLeft":
        // Flecha izquierda: palabra anterior
        event.preventDefault();
        currentPartIndex = 0;
        currentWordIndex--;

        // Comportamiento cíclico
        if (currentWordIndex < 0) {
          currentWordIndex = totalWords - 1;
        }

        showCurrentContent();
        break;
    }
  });

  // Asegurarse de que las voces estén cargadas (puede ser asíncrono)
  if (isSpeechAvailable) {
    // Firefox necesita esto
    loadVoices();

    // Chrome/Safari necesitan esto
    if (speechSynthesis.onvoiceschanged !== undefined) {
      speechSynthesis.onvoiceschanged = () => {
        loadVoices();
      };
    }
  }

  // Detener la reproducción cuando el usuario cambia de pestaña/ventana
  window.addEventListener("visibilitychange", () => {
    if (document.visibilityState === "hidden") {
      stopSpeech();
    }
  });

  // Mostrar el primer contenido al cargar la página
  function initializeContent() {
    if (totalWords > 0) {
      // Esperar un poco para asegurarse de que las voces se hayan cargado
      setTimeout(() => {
        showCurrentContent();
      }, 100);
    }
  }

  // Inicializar
  updateProgressIndicator();
  initializeContent();
</script>
